NewLayout builds on IvoLayout/PowerLayout but moves part of the logic (and
adds extra logic) to the Python implementation.


What's required? 

TkInter offers:

  row, col (possition): got that

  rowspan, colspan (spanning): got that

  ipadx, ipady: padding inside the widget: don't have that yet. Not sure if it's a layout property or a widget property.

  padx, pady: padding outside the widget: don't have that yet. Need it.

  sticky: gravity, alignment, expanding combined. Combination of NESW, i.e.
  E+W will expand horizontally, N+E+S+W will use up all space.
  default: Center

  Default configuration per row, per column: minsize, pad and weight.
  Weight determines how the layout behaves when resizing. Without weight, 
  a row/col will not resize.

Remaining issues:

Suggested API:

BaseLayout (used for Grid, H/VBox, static)
  __init__ - defaults:
    rows
    columns
    static
    padx, pady
    ipadx, ipady

    alignment / sticky (?)

    overall defaults?

  append
    row
    column
    padx, pady
    ipadx, ipady

The layoutmanager uses as much space as needed, which may be less than
available. If any of the rows are flexible, they will scale relatively
with the available space.

If the containing parent is too small
 - scrollbars?
 - resize parent container? (if no maxsize)
 - do nothing, clip? (tkinter with maxsize)

By default, containers (panels, windows) will take as much space as necessary. This means shrink/expand if necessary.
If the container itself is part of a layout, it may have certain 'stickyness'

If the container (or widget in general) has a defined size, then this is the size it takes. It can be aligned using stickyness.
It will be clipped if necessary.

What if a widget gets updated and resizes? I.e. becomes larger/smaller?
- You may not want a container (or layout in general) to resize once it's been scaled.
- It's hard / impossible to calculate the new size
 - take widget out of layout, move it offscreen, size it asif it's new
 - duplicate widget with new state to get its size
 - expanding is the biggest problem because the widget loses its original size. You can fake real (html) widget padding 
   sometimes but not always (i.e. buttons)

